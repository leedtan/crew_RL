[build-system]
requires = ["poetry-core", "poetry-dynamic-versioning>=1.3.0,<2.0.0"]
build-backend = "poetry_dynamic_versioning.backend"

[project]
name = "wt_ml"
authors = [{ name = "MarTech", email = "mmm-dev-team@ab-inbev.com" }]
readme = "README.md"
dynamic = ["version", "description"]
classifiers = [
  "Development Status :: 2 - Pre-Alpha",
  "Intended Audience :: Developers",
  "Natural Language :: English",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
]

[project.urls]
Home = "https://github.com/ab-inbev-martech-analytics/wt_ml"

[tool.black]
line-length = 120
target-version = ['py311']

[tool.commitizen]
name = "cz_conventional_commits"
version = "0.0.1"
version_files = ["wt_ml/__init__.py", "pyproject.toml:version"]
style = [
  [
    "qmark",
    "fg:#ff9d00 bold",
  ],
  [
    "question",
    "bold",
  ],
  [
    "answer",
    "fg:#ff9d00 bold",
  ],
  [
    "pointer",
    "fg:#ff9d00 bold",
  ],
  [
    "highlighted",
    "fg:#ff9d00 bold",
  ],
  [
    "selected",
    "fg:#cc5454",
  ],
  [
    "separator",
    "fg:#cc5454",
  ],
  [
    "instruction",
    "",
  ],
  [
    "text",
    "",
  ],
  [
    "disabled",
    "fg:#858585 italic",
  ],
]
tag_format = "v$version"
changelog_incremental = true
changelog_start_rev = "v0.0.1"

[tool.flake8]
ignore = [
  "E203",  # whitespace before ':'
  "E266",  # Too many leading '#' for block comments
  "PL123", # Use Path.open instead of open
  "U101",  # Unused argument that starts with underscore
  "W503",  # Newline before binary operator
]
max-line-length = 120
max-complexity = 18
inline-quotes = "double"
known-modules = ":[wt_ml]"
application-names = "wt_ml"
max-expression-complexity = 12
per-file-ignores = [
  # Has a bunch of abstract methods
  "wt_ml/config/hyperparameters.py:U100,A002",
  "wt_ml/config/file_params.py:U100,A002",
  "wt_ml/config/optuna_config.py:U100,A001,A002",
  # CI files, need to do sys.path.inset before import
  "cml/wfo/run_wfo.py:E402",
  "cml/train/model_train.py:E402",
]

[tool.isort]
profile = "black"

[tool.poetry]
name = "wt_ml"
version = "0.0.1"
description = ""
authors = ["MarTech <mmm-dev-team@ab-inbev.com>"]

[[tool.poetry.source]]
name = "PyPI"
priority = "primary"


[tool.poetry-dynamic-versioning]
enable = true
vcs = "git"
metadata = false
dirty = false
strict = true
style = "semver"
bump = true
latest-tag = false
format = "v{base}.{distance}-{stage}"
format-jinja = """
{%- if distance == 0 -%}
  {%- if branch == "develop" -%}
    {{ serialize_semver(base, pre=["beta"]) }}
  {%- elif branch == "staging" -%}
    {{ serialize_semver(base, pre=["alpha"]) }}
  {%- elif branch == "master" -%}
    {{ serialize_semver(base) }}
  {%- else -%}
    {{ serialize_semver(base, metadata=[branch_escaped]) }}
  {%- endif -%}
{%- else -%}
  {%- if branch == "develop" -%}
    {{ serialize_semver(bump_version(base), pre=["beta"]) }}
  {%- elif branch == "staging" -%}
    {{ serialize_semver(bump_version(base), pre=["alpha"]) }}
  {%- elif branch == "master" -%}
    {{ serialize_semver(bump_version(base)) }}
  {%- else -%}
    {{ serialize_semver(bump_version(base), metadata=[branch_escaped]) }}
  {%- endif -%}
{%- endif -%}
"""

[tool.poetry.dependencies]
python = ">=3.11,<3.13"
gitpython = "^3.1.43"
h5py = "^3.8.0"
holidays = "^0.23"
ipympl = "^0.9.3"
ipython = "^8.27.0"
joblib = "^1.1.0"
jupyter = "^1.0.0"
jupyterlab = "^4.0"
keras = "^2.11.0"
kneed = "^0.8.1"
loguru = "^0.6.0"
matplotlib = "^3.5.3"
notebook = "^7.0.0rc0"
numpy = { version = "^1.24", python = ">=3.11,<3.12" }
openpyxl = "^3.1.1"
optuna = "^3.1.0"
pandas = "^1.3.0"
plotly = "^5.12.0"
protobuf = "^3.19.6"
pyarrow = "^12.0.0"
pygithub = "^2.4.0"
python-dotenv = "^0.20.0"
PyYAML = "^6.0"
pyzmq = "25.1.2" # 26.0.0 has a conflict among some of our dependencies so fixing this version
report-generator = "^0.1.10"
requests = "^2.31.0"
ruptures = "^1.1.7"
scikit-learn = "^1.2.0"
scipy = "^1.12"
statsmodels = "^0.13.5"
tensorflow = { version = "2.14.0", markers = "sys_platform == 'linux'" }
tensorflow-intel = { version = "^2.14.0", markers = "sys_platform == 'win32'" }
tqdm = "^4.64.1"
typing-extensions = "^4.4.0"
wrapt = "^1.14.1"
xlrd = "^2.0.1"
XlsxWriter = "^3.0.3"

[tool.poetry.group.dev.dependencies]
black = "^23.1.0"
flake8 = "^6.0.0"
flake8-absolute-import = "^1.0.0.1"
flake8-builtins = "^2.1.0"
flake8-expression-complexity = "^0.0.11"
flake8-pyproject = "^1.2.2"
flake8-quotes = "^3.3.2"
flake8-requirements = "^1.7.6"
flake8-unused-arguments = "^0.0.12"
flake8-use-fstring = "^1.4"
flake8-use-pathlib = "^0.3.0"
ipywidgets = "^8.0.1"
isort = "^5.12.0"
jedi-language-server = "^0.41.0"
jupyterlab-code-formatter = "^2.1.0"
kaleido = "v0.2.1"
papermill = "^2.4.0"
pytest = "^7.1.2"
pytest-check = "^2.1.5"
pytest-cov = "^4.0.0"
pytest-html = "^3.1.1"
pytest-xdist = "^2.5.0"
seaborn = "^0.12.2"
snakeviz = "^2.2.0"
tensor-annotations-tensorflow-stubs = "^2.0.2"
tensorboard = "^2.12.0"
tensorboard-data-server = "^0.7.0"
tensorboard-plugin-profile = "^2.11.1"
tqdm-stubs = "^0.2.1"


[tool.poetry.group.git]
optional = true

[tool.poetry.group.git.dependencies]
commitizen = "^2.40.0"
pre-commit = "^3.0.4"

[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
mkdocs = "^1.4.2"
mkdocs-autorefs = "^0.4.1"
mkdocs-custom-fences = "^0.1.2"
mkdocs-gen-files = "^0.4.0"
mkdocs-git-authors-plugin = "^0.7.0"
mkdocs-git-revision-date-localized-plugin = "^1.1.0"
mkdocs-literate-nav = "^0.6.0"
mkdocs-material = "^9.0.15"
mkdocs-plotly-plugin = "^0.1.2"
mkdocs-section-index = "^0.3.5"
mkdocs-table-reader-plugin = "^2.0.1"
mkdocstrings = { extras = ["python"], version = "^0.25.2" }
python-markdown-math = "^0.8"


[tool.pyright]
venvPath = "./"
venv = ".venv"
exclude = ["**/__pycache__"]
include = ["wt_ml"]
reportMissingImports = true
reportMissingTypeStubs = true
pythonVersion = "3.11"
typeCheckingMode = "basic"
useLibraryCodeForTypes = true

[tool.pytest.ini_options]
# Ensure that markers are written in this format: "{marker_name}: ({marker_group}) {Description}."
markers = [
  "dataset: (unit) Test data loading and preprocessing.",
  "module: (unit) Test a module related utility",
  "layers: (unit) Test a specific layer or layer utility.",
  "network: (unit) Test a network related utility",
  "viz: (unit) Test visualization and output processing.",
  "quick: (e2e) Relatively fast e2e tests.",
  "slow: (e2e) Relatively slow e2e tests.",
  "wfo_quick: (e2e)  Quick test of WFO for e2e tests.",
  "wfo: (grouped_unit) Test wfo functionalities",
  "wfo_utils: (unit) Test wfo utils",
  "wfo_1: (unit) Test wfo functionalities split 1",
  "wfo_2: (unit) Test wfo functionalities split 2",
  "train_test_model: (unit) Test train_test_model functionalities",
  "roi_agg: (unit) Tests for aggregating roi curves in an optimal way.",
  "monotonic: (e2e) Test monotonicity in curves for e2e tests.",
  "app_data: (data) Test stability of data delivered to app.",
  "delivery_consistency: (data) Test stability between data to be delivered and data deployed in app (qa).",
  "raw_data: (data) Test basic data validation on raw parquet data.",
  "data: (data) Common test group for all data related tests inside test_data.",
]
addopts = "--cov=wt_ml --cov-report=xml --cov-report=html --cov-branch"
filterwarnings = []
xfail_strict = true



